/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { IotHubDescription as IotHubDescriptionMapper, TagsResource as TagsResourceMapper, EventHubConsumerGroupBodyDescription as EventHubConsumerGroupBodyDescriptionMapper, OperationInputs as OperationInputsMapper, TestAllRoutesInput as TestAllRoutesInputMapper, TestRouteInput as TestRouteInputMapper, ExportDevicesRequest as ExportDevicesRequestMapper, ImportDevicesRequest as ImportDevicesRequestMapper, CertificateDescription as CertificateDescriptionMapper, CertificateVerificationDescription as CertificateVerificationDescriptionMapper, FailoverInput as FailoverInputMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-07-02",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const iotHubDescription = {
    parameterPath: "iotHubDescription",
    mapper: IotHubDescriptionMapper
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const iotHubTags = {
    parameterPath: "iotHubTags",
    mapper: TagsResourceMapper
};
export const eventHubEndpointName = {
    parameterPath: "eventHubEndpointName",
    mapper: {
        serializedName: "eventHubEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const consumerGroupBody = {
    parameterPath: "consumerGroupBody",
    mapper: EventHubConsumerGroupBodyDescriptionMapper
};
export const jobId = {
    parameterPath: "jobId",
    mapper: {
        serializedName: "jobId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const iotHubName = {
    parameterPath: "iotHubName",
    mapper: {
        serializedName: "iotHubName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const operationInputs = {
    parameterPath: "operationInputs",
    mapper: OperationInputsMapper
};
export const input = {
    parameterPath: "input",
    mapper: TestAllRoutesInputMapper
};
export const input1 = {
    parameterPath: "input",
    mapper: TestRouteInputMapper
};
export const keyName = {
    parameterPath: "keyName",
    mapper: {
        serializedName: "keyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const exportDevicesParameters = {
    parameterPath: "exportDevicesParameters",
    mapper: ExportDevicesRequestMapper
};
export const importDevicesParameters = {
    parameterPath: "importDevicesParameters",
    mapper: ImportDevicesRequestMapper
};
export const certificateName = {
    parameterPath: "certificateName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
        },
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const certificateDescription = {
    parameterPath: "certificateDescription",
    mapper: CertificateDescriptionMapper
};
export const ifMatch1 = {
    parameterPath: "ifMatch",
    mapper: {
        serializedName: "If-Match",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const certificateVerificationBody = {
    parameterPath: "certificateVerificationBody",
    mapper: CertificateVerificationDescriptionMapper
};
export const failoverInput = {
    parameterPath: "failoverInput",
    mapper: FailoverInputMapper
};
export const groupId = {
    parameterPath: "groupId",
    mapper: {
        serializedName: "groupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnectionMapper
};
//# sourceMappingURL=parameters.js.map