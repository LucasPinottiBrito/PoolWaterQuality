/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { IotHubClient } from "../src/iotHubClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Iothub test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let iothubName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new IotHubClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            iothubName = "myiothubxxxxyyyjjrr";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("iotHubResource create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.iotHubResource.beginCreateOrUpdateAndWait(resourceGroup, iothubName, {
                location: location,
                tags: { key: "value1" },
                etag: "AAAAAAFD6M4=",
                properties: {
                    ipFilterRules: [],
                    networkRuleSets: {
                        defaultAction: "Deny",
                        applyToBuiltInEventHubEndpoint: true,
                        ipRules: [
                            {
                                filterName: "rule1",
                                action: "Allow",
                                ipMask: "131.117.159.53"
                            }
                        ]
                    },
                    eventHubEndpoints: {
                        events: {
                            retentionTimeInDays: 1,
                            partitionCount: 2
                        }
                    },
                    routing: {
                        endpoints: {
                            serviceBusQueues: [],
                            serviceBusTopics: [],
                            eventHubs: [],
                            storageContainers: []
                        },
                        routes: [],
                    },
                    storageEndpoints: {
                        $default: {
                            sasTtlAsIso8601: "PT1H",
                            connectionString: "",
                            containerName: ""
                        }
                    },
                    messagingEndpoints: {
                        fileNotifications: {
                            lockDurationAsIso8601: "PT1M",
                            ttlAsIso8601: "PT1H",
                            maxDeliveryCount: 10
                        }
                    },
                    enableFileUploadNotifications: false,
                    cloudToDevice: {
                        maxDeliveryCount: 10,
                        defaultTtlAsIso8601: "PT1H",
                        feedback: {
                            lockDurationAsIso8601: "PT1M",
                            ttlAsIso8601: "PT1H",
                            maxDeliveryCount: 10
                        }
                    },
                    features: "None",
                    minTlsVersion: "1.2"
                },
                sku: {
                    name: "S1",
                    capacity: 1
                }
            }, testPollingOptions);
            assert.equal(res.name, iothubName);
        });
    });
    it("iotHubResource get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.iotHubResource.get(resourceGroup, iothubName);
            assert.equal(res.name, iothubName);
        });
    });
    it("iotHubResource list test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.iotHubResource.listByResourceGroup(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("iotHubResource update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.iotHubResource.beginUpdateAndWait(resourceGroup, iothubName, { tags: { tag1: "value1" } }, testPollingOptions);
            assert.equal(res.name, iothubName);
        });
    });
    it("iotHubResource delete test", function () {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.iotHubResource.beginDeleteAndWait(resourceGroup, iothubName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.iotHubResource.listByResourceGroup(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=iothub_examples.js.map