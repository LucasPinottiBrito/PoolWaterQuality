'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
exports.KnownPublicNetworkAccess = void 0;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccess || (exports.KnownPublicNetworkAccess = {}));
/** Known values of {@link DefaultAction} that the service accepts. */
exports.KnownDefaultAction = void 0;
(function (KnownDefaultAction) {
    /** Deny */
    KnownDefaultAction["Deny"] = "Deny";
    /** Allow */
    KnownDefaultAction["Allow"] = "Allow";
})(exports.KnownDefaultAction || (exports.KnownDefaultAction = {}));
/** Known values of {@link NetworkRuleIPAction} that the service accepts. */
exports.KnownNetworkRuleIPAction = void 0;
(function (KnownNetworkRuleIPAction) {
    /** Allow */
    KnownNetworkRuleIPAction["Allow"] = "Allow";
})(exports.KnownNetworkRuleIPAction || (exports.KnownNetworkRuleIPAction = {}));
/** Known values of {@link PrivateLinkServiceConnectionStatus} that the service accepts. */
exports.KnownPrivateLinkServiceConnectionStatus = void 0;
(function (KnownPrivateLinkServiceConnectionStatus) {
    /** Pending */
    KnownPrivateLinkServiceConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateLinkServiceConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateLinkServiceConnectionStatus["Rejected"] = "Rejected";
    /** Disconnected */
    KnownPrivateLinkServiceConnectionStatus["Disconnected"] = "Disconnected";
})(exports.KnownPrivateLinkServiceConnectionStatus || (exports.KnownPrivateLinkServiceConnectionStatus = {}));
/** Known values of {@link AuthenticationType} that the service accepts. */
exports.KnownAuthenticationType = void 0;
(function (KnownAuthenticationType) {
    /** KeyBased */
    KnownAuthenticationType["KeyBased"] = "keyBased";
    /** IdentityBased */
    KnownAuthenticationType["IdentityBased"] = "identityBased";
})(exports.KnownAuthenticationType || (exports.KnownAuthenticationType = {}));
/** Known values of {@link RoutingStorageContainerPropertiesEncoding} that the service accepts. */
exports.KnownRoutingStorageContainerPropertiesEncoding = void 0;
(function (KnownRoutingStorageContainerPropertiesEncoding) {
    /** Avro */
    KnownRoutingStorageContainerPropertiesEncoding["Avro"] = "Avro";
    /** AvroDeflate */
    KnownRoutingStorageContainerPropertiesEncoding["AvroDeflate"] = "AvroDeflate";
    /** Json */
    KnownRoutingStorageContainerPropertiesEncoding["Json"] = "JSON";
})(exports.KnownRoutingStorageContainerPropertiesEncoding || (exports.KnownRoutingStorageContainerPropertiesEncoding = {}));
/** Known values of {@link RoutingSource} that the service accepts. */
exports.KnownRoutingSource = void 0;
(function (KnownRoutingSource) {
    /** Invalid */
    KnownRoutingSource["Invalid"] = "Invalid";
    /** DeviceMessages */
    KnownRoutingSource["DeviceMessages"] = "DeviceMessages";
    /** TwinChangeEvents */
    KnownRoutingSource["TwinChangeEvents"] = "TwinChangeEvents";
    /** DeviceLifecycleEvents */
    KnownRoutingSource["DeviceLifecycleEvents"] = "DeviceLifecycleEvents";
    /** DeviceJobLifecycleEvents */
    KnownRoutingSource["DeviceJobLifecycleEvents"] = "DeviceJobLifecycleEvents";
    /** DeviceConnectionStateEvents */
    KnownRoutingSource["DeviceConnectionStateEvents"] = "DeviceConnectionStateEvents";
})(exports.KnownRoutingSource || (exports.KnownRoutingSource = {}));
/** Known values of {@link Capabilities} that the service accepts. */
exports.KnownCapabilities = void 0;
(function (KnownCapabilities) {
    /** None */
    KnownCapabilities["None"] = "None";
    /** DeviceManagement */
    KnownCapabilities["DeviceManagement"] = "DeviceManagement";
})(exports.KnownCapabilities || (exports.KnownCapabilities = {}));
/** Known values of {@link IotHubReplicaRoleType} that the service accepts. */
exports.KnownIotHubReplicaRoleType = void 0;
(function (KnownIotHubReplicaRoleType) {
    /** Primary */
    KnownIotHubReplicaRoleType["Primary"] = "primary";
    /** Secondary */
    KnownIotHubReplicaRoleType["Secondary"] = "secondary";
})(exports.KnownIotHubReplicaRoleType || (exports.KnownIotHubReplicaRoleType = {}));
/** Known values of {@link IotHubSku} that the service accepts. */
exports.KnownIotHubSku = void 0;
(function (KnownIotHubSku) {
    /** F1 */
    KnownIotHubSku["F1"] = "F1";
    /** S1 */
    KnownIotHubSku["S1"] = "S1";
    /** S2 */
    KnownIotHubSku["S2"] = "S2";
    /** S3 */
    KnownIotHubSku["S3"] = "S3";
    /** B1 */
    KnownIotHubSku["B1"] = "B1";
    /** B2 */
    KnownIotHubSku["B2"] = "B2";
    /** B3 */
    KnownIotHubSku["B3"] = "B3";
})(exports.KnownIotHubSku || (exports.KnownIotHubSku = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link JobType} that the service accepts. */
exports.KnownJobType = void 0;
(function (KnownJobType) {
    /** Unknown */
    KnownJobType["Unknown"] = "unknown";
    /** Export */
    KnownJobType["Export"] = "export";
    /** Import */
    KnownJobType["Import"] = "import";
    /** Backup */
    KnownJobType["Backup"] = "backup";
    /** ReadDeviceProperties */
    KnownJobType["ReadDeviceProperties"] = "readDeviceProperties";
    /** WriteDeviceProperties */
    KnownJobType["WriteDeviceProperties"] = "writeDeviceProperties";
    /** UpdateDeviceConfiguration */
    KnownJobType["UpdateDeviceConfiguration"] = "updateDeviceConfiguration";
    /** RebootDevice */
    KnownJobType["RebootDevice"] = "rebootDevice";
    /** FactoryResetDevice */
    KnownJobType["FactoryResetDevice"] = "factoryResetDevice";
    /** FirmwareUpdate */
    KnownJobType["FirmwareUpdate"] = "firmwareUpdate";
})(exports.KnownJobType || (exports.KnownJobType = {}));
/** Known values of {@link EndpointHealthStatus} that the service accepts. */
exports.KnownEndpointHealthStatus = void 0;
(function (KnownEndpointHealthStatus) {
    /** Unknown */
    KnownEndpointHealthStatus["Unknown"] = "unknown";
    /** Healthy */
    KnownEndpointHealthStatus["Healthy"] = "healthy";
    /** Degraded */
    KnownEndpointHealthStatus["Degraded"] = "degraded";
    /** Unhealthy */
    KnownEndpointHealthStatus["Unhealthy"] = "unhealthy";
    /** Dead */
    KnownEndpointHealthStatus["Dead"] = "dead";
})(exports.KnownEndpointHealthStatus || (exports.KnownEndpointHealthStatus = {}));
/** Known values of {@link TestResultStatus} that the service accepts. */
exports.KnownTestResultStatus = void 0;
(function (KnownTestResultStatus) {
    /** Undefined */
    KnownTestResultStatus["Undefined"] = "undefined";
    /** False */
    KnownTestResultStatus["False"] = "false";
    /** True */
    KnownTestResultStatus["True"] = "true";
})(exports.KnownTestResultStatus || (exports.KnownTestResultStatus = {}));
/** Known values of {@link RouteErrorSeverity} that the service accepts. */
exports.KnownRouteErrorSeverity = void 0;
(function (KnownRouteErrorSeverity) {
    /** Error */
    KnownRouteErrorSeverity["Error"] = "error";
    /** Warning */
    KnownRouteErrorSeverity["Warning"] = "warning";
})(exports.KnownRouteErrorSeverity || (exports.KnownRouteErrorSeverity = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorDetails = {
    type: {
        name: "Composite",
        className: "ErrorDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            httpStatusCode: {
                serializedName: "httpStatusCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IotHubProperties = {
    type: {
        name: "Composite",
        className: "IotHubProperties",
        modelProperties: {
            authorizationPolicies: {
                serializedName: "authorizationPolicies",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SharedAccessSignatureAuthorizationRule"
                        }
                    }
                }
            },
            disableLocalAuth: {
                serializedName: "disableLocalAuth",
                type: {
                    name: "Boolean"
                }
            },
            disableDeviceSAS: {
                serializedName: "disableDeviceSAS",
                type: {
                    name: "Boolean"
                }
            },
            disableModuleSAS: {
                serializedName: "disableModuleSAS",
                type: {
                    name: "Boolean"
                }
            },
            restrictOutboundNetworkAccess: {
                serializedName: "restrictOutboundNetworkAccess",
                type: {
                    name: "Boolean"
                }
            },
            allowedFqdnList: {
                serializedName: "allowedFqdnList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            publicNetworkAccess: {
                serializedName: "publicNetworkAccess",
                type: {
                    name: "String"
                }
            },
            ipFilterRules: {
                serializedName: "ipFilterRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IpFilterRule"
                        }
                    }
                }
            },
            networkRuleSets: {
                serializedName: "networkRuleSets",
                type: {
                    name: "Composite",
                    className: "NetworkRuleSetProperties"
                }
            },
            minTlsVersion: {
                serializedName: "minTlsVersion",
                type: {
                    name: "String"
                }
            },
            privateEndpointConnections: {
                serializedName: "privateEndpointConnections",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            hostName: {
                serializedName: "hostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            eventHubEndpoints: {
                serializedName: "eventHubEndpoints",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "EventHubProperties" }
                    }
                }
            },
            routing: {
                serializedName: "routing",
                type: {
                    name: "Composite",
                    className: "RoutingProperties"
                }
            },
            storageEndpoints: {
                serializedName: "storageEndpoints",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "StorageEndpointProperties" }
                    }
                }
            },
            messagingEndpoints: {
                serializedName: "messagingEndpoints",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "MessagingEndpointProperties"
                        }
                    }
                }
            },
            enableFileUploadNotifications: {
                serializedName: "enableFileUploadNotifications",
                type: {
                    name: "Boolean"
                }
            },
            cloudToDevice: {
                serializedName: "cloudToDevice",
                type: {
                    name: "Composite",
                    className: "CloudToDeviceProperties"
                }
            },
            comments: {
                serializedName: "comments",
                type: {
                    name: "String"
                }
            },
            features: {
                serializedName: "features",
                type: {
                    name: "String"
                }
            },
            locations: {
                serializedName: "locations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IotHubLocationDescription"
                        }
                    }
                }
            },
            enableDataResidency: {
                serializedName: "enableDataResidency",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SharedAccessSignatureAuthorizationRule = {
    type: {
        name: "Composite",
        className: "SharedAccessSignatureAuthorizationRule",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                required: true,
                type: {
                    name: "String"
                }
            },
            primaryKey: {
                serializedName: "primaryKey",
                type: {
                    name: "String"
                }
            },
            secondaryKey: {
                serializedName: "secondaryKey",
                type: {
                    name: "String"
                }
            },
            rights: {
                serializedName: "rights",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "RegistryRead",
                        "RegistryWrite",
                        "ServiceConnect",
                        "DeviceConnect",
                        "RegistryRead, RegistryWrite",
                        "RegistryRead, ServiceConnect",
                        "RegistryRead, DeviceConnect",
                        "RegistryWrite, ServiceConnect",
                        "RegistryWrite, DeviceConnect",
                        "ServiceConnect, DeviceConnect",
                        "RegistryRead, RegistryWrite, ServiceConnect",
                        "RegistryRead, RegistryWrite, DeviceConnect",
                        "RegistryRead, ServiceConnect, DeviceConnect",
                        "RegistryWrite, ServiceConnect, DeviceConnect",
                        "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect"
                    ]
                }
            }
        }
    }
};
const IpFilterRule = {
    type: {
        name: "Composite",
        className: "IpFilterRule",
        modelProperties: {
            filterName: {
                serializedName: "filterName",
                required: true,
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Accept", "Reject"]
                }
            },
            ipMask: {
                serializedName: "ipMask",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NetworkRuleSetProperties = {
    type: {
        name: "Composite",
        className: "NetworkRuleSetProperties",
        modelProperties: {
            defaultAction: {
                defaultValue: "Deny",
                serializedName: "defaultAction",
                type: {
                    name: "String"
                }
            },
            applyToBuiltInEventHubEndpoint: {
                serializedName: "applyToBuiltInEventHubEndpoint",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            ipRules: {
                serializedName: "ipRules",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkRuleSetIpRule"
                        }
                    }
                }
            }
        }
    }
};
const NetworkRuleSetIpRule = {
    type: {
        name: "Composite",
        className: "NetworkRuleSetIpRule",
        modelProperties: {
            filterName: {
                serializedName: "filterName",
                required: true,
                type: {
                    name: "String"
                }
            },
            action: {
                defaultValue: "Allow",
                serializedName: "action",
                type: {
                    name: "String"
                }
            },
            ipMask: {
                serializedName: "ipMask",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateEndpointConnectionProperties"
                }
            }
        }
    }
};
const PrivateEndpointConnectionProperties = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionProperties",
        modelProperties: {
            privateEndpoint: {
                serializedName: "privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            },
            privateLinkServiceConnectionState: {
                serializedName: "privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                required: true,
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventHubProperties = {
    type: {
        name: "Composite",
        className: "EventHubProperties",
        modelProperties: {
            retentionTimeInDays: {
                serializedName: "retentionTimeInDays",
                type: {
                    name: "Number"
                }
            },
            partitionCount: {
                serializedName: "partitionCount",
                type: {
                    name: "Number"
                }
            },
            partitionIds: {
                serializedName: "partitionIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            path: {
                serializedName: "path",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            endpoint: {
                serializedName: "endpoint",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoutingProperties = {
    type: {
        name: "Composite",
        className: "RoutingProperties",
        modelProperties: {
            endpoints: {
                serializedName: "endpoints",
                type: {
                    name: "Composite",
                    className: "RoutingEndpoints"
                }
            },
            routes: {
                serializedName: "routes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RouteProperties"
                        }
                    }
                }
            },
            fallbackRoute: {
                serializedName: "fallbackRoute",
                type: {
                    name: "Composite",
                    className: "FallbackRouteProperties"
                }
            },
            enrichments: {
                serializedName: "enrichments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EnrichmentProperties"
                        }
                    }
                }
            }
        }
    }
};
const RoutingEndpoints = {
    type: {
        name: "Composite",
        className: "RoutingEndpoints",
        modelProperties: {
            serviceBusQueues: {
                serializedName: "serviceBusQueues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoutingServiceBusQueueEndpointProperties"
                        }
                    }
                }
            },
            serviceBusTopics: {
                serializedName: "serviceBusTopics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoutingServiceBusTopicEndpointProperties"
                        }
                    }
                }
            },
            eventHubs: {
                serializedName: "eventHubs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoutingEventHubProperties"
                        }
                    }
                }
            },
            storageContainers: {
                serializedName: "storageContainers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoutingStorageContainerProperties"
                        }
                    }
                }
            }
        }
    }
};
const RoutingServiceBusQueueEndpointProperties = {
    type: {
        name: "Composite",
        className: "RoutingServiceBusQueueEndpointProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            connectionString: {
                serializedName: "connectionString",
                type: {
                    name: "String"
                }
            },
            endpointUri: {
                serializedName: "endpointUri",
                type: {
                    name: "String"
                }
            },
            entityPath: {
                serializedName: "entityPath",
                type: {
                    name: "String"
                }
            },
            authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentity"
                }
            },
            name: {
                constraints: {
                    Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedIdentity = {
    type: {
        name: "Composite",
        className: "ManagedIdentity",
        modelProperties: {
            userAssignedIdentity: {
                serializedName: "userAssignedIdentity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoutingServiceBusTopicEndpointProperties = {
    type: {
        name: "Composite",
        className: "RoutingServiceBusTopicEndpointProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            connectionString: {
                serializedName: "connectionString",
                type: {
                    name: "String"
                }
            },
            endpointUri: {
                serializedName: "endpointUri",
                type: {
                    name: "String"
                }
            },
            entityPath: {
                serializedName: "entityPath",
                type: {
                    name: "String"
                }
            },
            authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentity"
                }
            },
            name: {
                constraints: {
                    Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoutingEventHubProperties = {
    type: {
        name: "Composite",
        className: "RoutingEventHubProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            connectionString: {
                serializedName: "connectionString",
                type: {
                    name: "String"
                }
            },
            endpointUri: {
                serializedName: "endpointUri",
                type: {
                    name: "String"
                }
            },
            entityPath: {
                serializedName: "entityPath",
                type: {
                    name: "String"
                }
            },
            authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentity"
                }
            },
            name: {
                constraints: {
                    Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoutingStorageContainerProperties = {
    type: {
        name: "Composite",
        className: "RoutingStorageContainerProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            connectionString: {
                serializedName: "connectionString",
                type: {
                    name: "String"
                }
            },
            endpointUri: {
                serializedName: "endpointUri",
                type: {
                    name: "String"
                }
            },
            authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentity"
                }
            },
            name: {
                constraints: {
                    Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "containerName",
                required: true,
                type: {
                    name: "String"
                }
            },
            fileNameFormat: {
                serializedName: "fileNameFormat",
                type: {
                    name: "String"
                }
            },
            batchFrequencyInSeconds: {
                constraints: {
                    InclusiveMaximum: 720,
                    InclusiveMinimum: 60
                },
                serializedName: "batchFrequencyInSeconds",
                type: {
                    name: "Number"
                }
            },
            maxChunkSizeInBytes: {
                constraints: {
                    InclusiveMaximum: 524288000,
                    InclusiveMinimum: 10485760
                },
                serializedName: "maxChunkSizeInBytes",
                type: {
                    name: "Number"
                }
            },
            encoding: {
                serializedName: "encoding",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RouteProperties = {
    type: {
        name: "Composite",
        className: "RouteProperties",
        modelProperties: {
            name: {
                constraints: {
                    Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            source: {
                serializedName: "source",
                required: true,
                type: {
                    name: "String"
                }
            },
            condition: {
                serializedName: "condition",
                type: {
                    name: "String"
                }
            },
            endpointNames: {
                constraints: {
                    MinItems: 1,
                    MaxItems: 1
                },
                serializedName: "endpointNames",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const FallbackRouteProperties = {
    type: {
        name: "Composite",
        className: "FallbackRouteProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            source: {
                serializedName: "source",
                required: true,
                type: {
                    name: "String"
                }
            },
            condition: {
                serializedName: "condition",
                type: {
                    name: "String"
                }
            },
            endpointNames: {
                constraints: {
                    MinItems: 1,
                    MaxItems: 1
                },
                serializedName: "endpointNames",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const EnrichmentProperties = {
    type: {
        name: "Composite",
        className: "EnrichmentProperties",
        modelProperties: {
            key: {
                serializedName: "key",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            },
            endpointNames: {
                constraints: {
                    MinItems: 1
                },
                serializedName: "endpointNames",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const StorageEndpointProperties = {
    type: {
        name: "Composite",
        className: "StorageEndpointProperties",
        modelProperties: {
            sasTtlAsIso8601: {
                serializedName: "sasTtlAsIso8601",
                type: {
                    name: "TimeSpan"
                }
            },
            connectionString: {
                serializedName: "connectionString",
                required: true,
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "containerName",
                required: true,
                type: {
                    name: "String"
                }
            },
            authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentity"
                }
            }
        }
    }
};
const MessagingEndpointProperties = {
    type: {
        name: "Composite",
        className: "MessagingEndpointProperties",
        modelProperties: {
            lockDurationAsIso8601: {
                serializedName: "lockDurationAsIso8601",
                type: {
                    name: "TimeSpan"
                }
            },
            ttlAsIso8601: {
                serializedName: "ttlAsIso8601",
                type: {
                    name: "TimeSpan"
                }
            },
            maxDeliveryCount: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 1
                },
                serializedName: "maxDeliveryCount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CloudToDeviceProperties = {
    type: {
        name: "Composite",
        className: "CloudToDeviceProperties",
        modelProperties: {
            maxDeliveryCount: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 1
                },
                serializedName: "maxDeliveryCount",
                type: {
                    name: "Number"
                }
            },
            defaultTtlAsIso8601: {
                serializedName: "defaultTtlAsIso8601",
                type: {
                    name: "TimeSpan"
                }
            },
            feedback: {
                serializedName: "feedback",
                type: {
                    name: "Composite",
                    className: "FeedbackProperties"
                }
            }
        }
    }
};
const FeedbackProperties = {
    type: {
        name: "Composite",
        className: "FeedbackProperties",
        modelProperties: {
            lockDurationAsIso8601: {
                serializedName: "lockDurationAsIso8601",
                type: {
                    name: "TimeSpan"
                }
            },
            ttlAsIso8601: {
                serializedName: "ttlAsIso8601",
                type: {
                    name: "TimeSpan"
                }
            },
            maxDeliveryCount: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 1
                },
                serializedName: "maxDeliveryCount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const IotHubLocationDescription = {
    type: {
        name: "Composite",
        className: "IotHubLocationDescription",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            role: {
                serializedName: "role",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IotHubSkuInfo = {
    type: {
        name: "Composite",
        className: "IotHubSkuInfo",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Free", "Standard", "Basic"]
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ArmIdentity = {
    type: {
        name: "Composite",
        className: "ArmIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "SystemAssigned",
                        "UserAssigned",
                        "SystemAssigned, UserAssigned",
                        "None"
                    ]
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "ArmUserIdentity" } }
                }
            }
        }
    }
};
const ArmUserIdentity = {
    type: {
        name: "Composite",
        className: "ArmUserIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                constraints: {
                    Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")
                },
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const TagsResource = {
    type: {
        name: "Composite",
        className: "TagsResource",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const IotHubDescriptionListResult = {
    type: {
        name: "Composite",
        className: "IotHubDescriptionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IotHubDescription"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegistryStatistics = {
    type: {
        name: "Composite",
        className: "RegistryStatistics",
        modelProperties: {
            totalDeviceCount: {
                serializedName: "totalDeviceCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            enabledDeviceCount: {
                serializedName: "enabledDeviceCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            disabledDeviceCount: {
                serializedName: "disabledDeviceCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const IotHubSkuDescriptionListResult = {
    type: {
        name: "Composite",
        className: "IotHubSkuDescriptionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IotHubSkuDescription"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IotHubSkuDescription = {
    type: {
        name: "Composite",
        className: "IotHubSkuDescription",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "IotHubSkuInfo"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Composite",
                    className: "IotHubCapacity"
                }
            }
        }
    }
};
const IotHubCapacity = {
    type: {
        name: "Composite",
        className: "IotHubCapacity",
        modelProperties: {
            minimum: {
                constraints: {
                    InclusiveMaximum: 1,
                    InclusiveMinimum: 1
                },
                serializedName: "minimum",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            maximum: {
                serializedName: "maximum",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            default: {
                serializedName: "default",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            scaleType: {
                serializedName: "scaleType",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Automatic", "Manual", "None"]
                }
            }
        }
    }
};
const EventHubConsumerGroupsListResult = {
    type: {
        name: "Composite",
        className: "EventHubConsumerGroupsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EventHubConsumerGroupInfo"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventHubConsumerGroupInfo = {
    type: {
        name: "Composite",
        className: "EventHubConsumerGroupInfo",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventHubConsumerGroupBodyDescription = {
    type: {
        name: "Composite",
        className: "EventHubConsumerGroupBodyDescription",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "EventHubConsumerGroupName"
                }
            }
        }
    }
};
const EventHubConsumerGroupName = {
    type: {
        name: "Composite",
        className: "EventHubConsumerGroupName",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobResponseListResult = {
    type: {
        name: "Composite",
        className: "JobResponseListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobResponse"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobResponse = {
    type: {
        name: "Composite",
        className: "JobResponse",
        modelProperties: {
            jobId: {
                serializedName: "jobId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTimeUtc: {
                serializedName: "startTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            endTimeUtc: {
                serializedName: "endTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "unknown",
                        "enqueued",
                        "running",
                        "completed",
                        "failed",
                        "cancelled"
                    ]
                }
            },
            failureReason: {
                serializedName: "failureReason",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            statusMessage: {
                serializedName: "statusMessage",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            parentJobId: {
                serializedName: "parentJobId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IotHubQuotaMetricInfoListResult = {
    type: {
        name: "Composite",
        className: "IotHubQuotaMetricInfoListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IotHubQuotaMetricInfo"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IotHubQuotaMetricInfo = {
    type: {
        name: "Composite",
        className: "IotHubQuotaMetricInfo",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            maxValue: {
                serializedName: "maxValue",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const EndpointHealthDataListResult = {
    type: {
        name: "Composite",
        className: "EndpointHealthDataListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EndpointHealthData"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EndpointHealthData = {
    type: {
        name: "Composite",
        className: "EndpointHealthData",
        modelProperties: {
            endpointId: {
                serializedName: "endpointId",
                type: {
                    name: "String"
                }
            },
            healthStatus: {
                serializedName: "healthStatus",
                type: {
                    name: "String"
                }
            },
            lastKnownError: {
                serializedName: "lastKnownError",
                type: {
                    name: "String"
                }
            },
            lastKnownErrorTime: {
                serializedName: "lastKnownErrorTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            lastSuccessfulSendAttemptTime: {
                serializedName: "lastSuccessfulSendAttemptTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            lastSendAttemptTime: {
                serializedName: "lastSendAttemptTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const OperationInputs = {
    type: {
        name: "Composite",
        className: "OperationInputs",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IotHubNameAvailabilityInfo = {
    type: {
        name: "Composite",
        className: "IotHubNameAvailabilityInfo",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Invalid", "AlreadyExists"]
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserSubscriptionQuotaListResult = {
    type: {
        name: "Composite",
        className: "UserSubscriptionQuotaListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UserSubscriptionQuota"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserSubscriptionQuota = {
    type: {
        name: "Composite",
        className: "UserSubscriptionQuota",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                type: {
                    name: "Number"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "Name"
                }
            }
        }
    }
};
const Name = {
    type: {
        name: "Composite",
        className: "Name",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            localizedValue: {
                serializedName: "localizedValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TestAllRoutesInput = {
    type: {
        name: "Composite",
        className: "TestAllRoutesInput",
        modelProperties: {
            routingSource: {
                serializedName: "routingSource",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "Composite",
                    className: "RoutingMessage"
                }
            },
            twin: {
                serializedName: "twin",
                type: {
                    name: "Composite",
                    className: "RoutingTwin"
                }
            }
        }
    }
};
const RoutingMessage = {
    type: {
        name: "Composite",
        className: "RoutingMessage",
        modelProperties: {
            body: {
                serializedName: "body",
                type: {
                    name: "String"
                }
            },
            appProperties: {
                serializedName: "appProperties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            systemProperties: {
                serializedName: "systemProperties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const RoutingTwin = {
    type: {
        name: "Composite",
        className: "RoutingTwin",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RoutingTwinProperties"
                }
            }
        }
    }
};
const RoutingTwinProperties = {
    type: {
        name: "Composite",
        className: "RoutingTwinProperties",
        modelProperties: {
            desired: {
                serializedName: "desired",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            reported: {
                serializedName: "reported",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const TestAllRoutesResult = {
    type: {
        name: "Composite",
        className: "TestAllRoutesResult",
        modelProperties: {
            routes: {
                serializedName: "routes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MatchedRoute"
                        }
                    }
                }
            }
        }
    }
};
const MatchedRoute = {
    type: {
        name: "Composite",
        className: "MatchedRoute",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RouteProperties"
                }
            }
        }
    }
};
const TestRouteInput = {
    type: {
        name: "Composite",
        className: "TestRouteInput",
        modelProperties: {
            message: {
                serializedName: "message",
                type: {
                    name: "Composite",
                    className: "RoutingMessage"
                }
            },
            route: {
                serializedName: "route",
                type: {
                    name: "Composite",
                    className: "RouteProperties"
                }
            },
            twin: {
                serializedName: "twin",
                type: {
                    name: "Composite",
                    className: "RoutingTwin"
                }
            }
        }
    }
};
const TestRouteResult = {
    type: {
        name: "Composite",
        className: "TestRouteResult",
        modelProperties: {
            result: {
                serializedName: "result",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Composite",
                    className: "TestRouteResultDetails"
                }
            }
        }
    }
};
const TestRouteResultDetails = {
    type: {
        name: "Composite",
        className: "TestRouteResultDetails",
        modelProperties: {
            compilationErrors: {
                serializedName: "compilationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RouteCompilationError"
                        }
                    }
                }
            }
        }
    }
};
const RouteCompilationError = {
    type: {
        name: "Composite",
        className: "RouteCompilationError",
        modelProperties: {
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "Composite",
                    className: "RouteErrorRange"
                }
            }
        }
    }
};
const RouteErrorRange = {
    type: {
        name: "Composite",
        className: "RouteErrorRange",
        modelProperties: {
            start: {
                serializedName: "start",
                type: {
                    name: "Composite",
                    className: "RouteErrorPosition"
                }
            },
            end: {
                serializedName: "end",
                type: {
                    name: "Composite",
                    className: "RouteErrorPosition"
                }
            }
        }
    }
};
const RouteErrorPosition = {
    type: {
        name: "Composite",
        className: "RouteErrorPosition",
        modelProperties: {
            line: {
                serializedName: "line",
                type: {
                    name: "Number"
                }
            },
            column: {
                serializedName: "column",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SharedAccessSignatureAuthorizationRuleListResult = {
    type: {
        name: "Composite",
        className: "SharedAccessSignatureAuthorizationRuleListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SharedAccessSignatureAuthorizationRule"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExportDevicesRequest = {
    type: {
        name: "Composite",
        className: "ExportDevicesRequest",
        modelProperties: {
            exportBlobContainerUri: {
                serializedName: "exportBlobContainerUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            excludeKeys: {
                serializedName: "excludeKeys",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            exportBlobName: {
                serializedName: "exportBlobName",
                type: {
                    name: "String"
                }
            },
            authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentity"
                }
            },
            includeConfigurations: {
                serializedName: "includeConfigurations",
                type: {
                    name: "Boolean"
                }
            },
            configurationsBlobName: {
                serializedName: "configurationsBlobName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImportDevicesRequest = {
    type: {
        name: "Composite",
        className: "ImportDevicesRequest",
        modelProperties: {
            inputBlobContainerUri: {
                serializedName: "inputBlobContainerUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            outputBlobContainerUri: {
                serializedName: "outputBlobContainerUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            inputBlobName: {
                serializedName: "inputBlobName",
                type: {
                    name: "String"
                }
            },
            outputBlobName: {
                serializedName: "outputBlobName",
                type: {
                    name: "String"
                }
            },
            authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentity"
                }
            },
            includeConfigurations: {
                serializedName: "includeConfigurations",
                type: {
                    name: "Boolean"
                }
            },
            configurationsBlobName: {
                serializedName: "configurationsBlobName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CertificateListDescription = {
    type: {
        name: "Composite",
        className: "CertificateListDescription",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CertificateDescription"
                        }
                    }
                }
            }
        }
    }
};
const CertificateDescription = {
    type: {
        name: "Composite",
        className: "CertificateDescription",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CertificateProperties"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CertificateProperties = {
    type: {
        name: "Composite",
        className: "CertificateProperties",
        modelProperties: {
            subject: {
                serializedName: "subject",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            expiry: {
                serializedName: "expiry",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            thumbprint: {
                serializedName: "thumbprint",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isVerified: {
                serializedName: "isVerified",
                type: {
                    name: "Boolean"
                }
            },
            created: {
                serializedName: "created",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            updated: {
                serializedName: "updated",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            certificate: {
                serializedName: "certificate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CertificateWithNonceDescription = {
    type: {
        name: "Composite",
        className: "CertificateWithNonceDescription",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CertificatePropertiesWithNonce"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CertificatePropertiesWithNonce = {
    type: {
        name: "Composite",
        className: "CertificatePropertiesWithNonce",
        modelProperties: {
            subject: {
                serializedName: "subject",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            expiry: {
                serializedName: "expiry",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            thumbprint: {
                serializedName: "thumbprint",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isVerified: {
                serializedName: "isVerified",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            created: {
                serializedName: "created",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            updated: {
                serializedName: "updated",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            verificationCode: {
                serializedName: "verificationCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            certificate: {
                serializedName: "certificate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CertificateVerificationDescription = {
    type: {
        name: "Composite",
        className: "CertificateVerificationDescription",
        modelProperties: {
            certificate: {
                serializedName: "certificate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FailoverInput = {
    type: {
        name: "Composite",
        className: "FailoverInput",
        modelProperties: {
            failoverRegion: {
                serializedName: "failoverRegion",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResources = {
    type: {
        name: "Composite",
        className: "PrivateLinkResources",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GroupIdInformation"
                        }
                    }
                }
            }
        }
    }
};
const GroupIdInformation = {
    type: {
        name: "Composite",
        className: "GroupIdInformation",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "GroupIdInformationProperties"
                }
            }
        }
    }
};
const GroupIdInformationProperties = {
    type: {
        name: "Composite",
        className: "GroupIdInformationProperties",
        modelProperties: {
            groupId: {
                serializedName: "groupId",
                type: {
                    name: "String"
                }
            },
            requiredMembers: {
                serializedName: "requiredMembers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const CertificateBodyDescription = {
    type: {
        name: "Composite",
        className: "CertificateBodyDescription",
        modelProperties: {
            certificate: {
                serializedName: "certificate",
                type: {
                    name: "String"
                }
            },
            isVerified: {
                serializedName: "isVerified",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const IotHubDescription = {
    type: {
        name: "Composite",
        className: "IotHubDescription",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }, properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IotHubProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "IotHubSkuInfo"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ArmIdentity"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ErrorDetails: ErrorDetails,
    IotHubProperties: IotHubProperties,
    SharedAccessSignatureAuthorizationRule: SharedAccessSignatureAuthorizationRule,
    IpFilterRule: IpFilterRule,
    NetworkRuleSetProperties: NetworkRuleSetProperties,
    NetworkRuleSetIpRule: NetworkRuleSetIpRule,
    PrivateEndpointConnection: PrivateEndpointConnection,
    PrivateEndpointConnectionProperties: PrivateEndpointConnectionProperties,
    PrivateEndpoint: PrivateEndpoint,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    EventHubProperties: EventHubProperties,
    RoutingProperties: RoutingProperties,
    RoutingEndpoints: RoutingEndpoints,
    RoutingServiceBusQueueEndpointProperties: RoutingServiceBusQueueEndpointProperties,
    ManagedIdentity: ManagedIdentity,
    RoutingServiceBusTopicEndpointProperties: RoutingServiceBusTopicEndpointProperties,
    RoutingEventHubProperties: RoutingEventHubProperties,
    RoutingStorageContainerProperties: RoutingStorageContainerProperties,
    RouteProperties: RouteProperties,
    FallbackRouteProperties: FallbackRouteProperties,
    EnrichmentProperties: EnrichmentProperties,
    StorageEndpointProperties: StorageEndpointProperties,
    MessagingEndpointProperties: MessagingEndpointProperties,
    CloudToDeviceProperties: CloudToDeviceProperties,
    FeedbackProperties: FeedbackProperties,
    IotHubLocationDescription: IotHubLocationDescription,
    IotHubSkuInfo: IotHubSkuInfo,
    ArmIdentity: ArmIdentity,
    ArmUserIdentity: ArmUserIdentity,
    SystemData: SystemData,
    Resource: Resource,
    TagsResource: TagsResource,
    IotHubDescriptionListResult: IotHubDescriptionListResult,
    RegistryStatistics: RegistryStatistics,
    IotHubSkuDescriptionListResult: IotHubSkuDescriptionListResult,
    IotHubSkuDescription: IotHubSkuDescription,
    IotHubCapacity: IotHubCapacity,
    EventHubConsumerGroupsListResult: EventHubConsumerGroupsListResult,
    EventHubConsumerGroupInfo: EventHubConsumerGroupInfo,
    EventHubConsumerGroupBodyDescription: EventHubConsumerGroupBodyDescription,
    EventHubConsumerGroupName: EventHubConsumerGroupName,
    JobResponseListResult: JobResponseListResult,
    JobResponse: JobResponse,
    IotHubQuotaMetricInfoListResult: IotHubQuotaMetricInfoListResult,
    IotHubQuotaMetricInfo: IotHubQuotaMetricInfo,
    EndpointHealthDataListResult: EndpointHealthDataListResult,
    EndpointHealthData: EndpointHealthData,
    OperationInputs: OperationInputs,
    IotHubNameAvailabilityInfo: IotHubNameAvailabilityInfo,
    UserSubscriptionQuotaListResult: UserSubscriptionQuotaListResult,
    UserSubscriptionQuota: UserSubscriptionQuota,
    Name: Name,
    TestAllRoutesInput: TestAllRoutesInput,
    RoutingMessage: RoutingMessage,
    RoutingTwin: RoutingTwin,
    RoutingTwinProperties: RoutingTwinProperties,
    TestAllRoutesResult: TestAllRoutesResult,
    MatchedRoute: MatchedRoute,
    TestRouteInput: TestRouteInput,
    TestRouteResult: TestRouteResult,
    TestRouteResultDetails: TestRouteResultDetails,
    RouteCompilationError: RouteCompilationError,
    RouteErrorRange: RouteErrorRange,
    RouteErrorPosition: RouteErrorPosition,
    SharedAccessSignatureAuthorizationRuleListResult: SharedAccessSignatureAuthorizationRuleListResult,
    ExportDevicesRequest: ExportDevicesRequest,
    ImportDevicesRequest: ImportDevicesRequest,
    CertificateListDescription: CertificateListDescription,
    CertificateDescription: CertificateDescription,
    CertificateProperties: CertificateProperties,
    CertificateWithNonceDescription: CertificateWithNonceDescription,
    CertificatePropertiesWithNonce: CertificatePropertiesWithNonce,
    CertificateVerificationDescription: CertificateVerificationDescription,
    FailoverInput: FailoverInput,
    PrivateLinkResources: PrivateLinkResources,
    GroupIdInformation: GroupIdInformation,
    GroupIdInformationProperties: GroupIdInformationProperties,
    CertificateBodyDescription: CertificateBodyDescription,
    IotHubDescription: IotHubDescription
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-07-02",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const iotHubDescription = {
    parameterPath: "iotHubDescription",
    mapper: IotHubDescription
};
const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
const iotHubTags = {
    parameterPath: "iotHubTags",
    mapper: TagsResource
};
const eventHubEndpointName = {
    parameterPath: "eventHubEndpointName",
    mapper: {
        serializedName: "eventHubEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
const consumerGroupBody = {
    parameterPath: "consumerGroupBody",
    mapper: EventHubConsumerGroupBodyDescription
};
const jobId = {
    parameterPath: "jobId",
    mapper: {
        serializedName: "jobId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const iotHubName = {
    parameterPath: "iotHubName",
    mapper: {
        serializedName: "iotHubName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const operationInputs = {
    parameterPath: "operationInputs",
    mapper: OperationInputs
};
const input = {
    parameterPath: "input",
    mapper: TestAllRoutesInput
};
const input1 = {
    parameterPath: "input",
    mapper: TestRouteInput
};
const keyName = {
    parameterPath: "keyName",
    mapper: {
        serializedName: "keyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const exportDevicesParameters = {
    parameterPath: "exportDevicesParameters",
    mapper: ExportDevicesRequest
};
const importDevicesParameters = {
    parameterPath: "importDevicesParameters",
    mapper: ImportDevicesRequest
};
const certificateName = {
    parameterPath: "certificateName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
        },
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const certificateDescription = {
    parameterPath: "certificateDescription",
    mapper: CertificateDescription
};
const ifMatch1 = {
    parameterPath: "ifMatch",
    mapper: {
        serializedName: "If-Match",
        required: true,
        type: {
            name: "String"
        }
    }
};
const certificateVerificationBody = {
    parameterPath: "certificateVerificationBody",
    mapper: CertificateVerificationDescription
};
const failoverInput = {
    parameterPath: "failoverInput",
    mapper: FailoverInput
};
const groupId = {
    parameterPath: "groupId",
    mapper: {
        serializedName: "groupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnection
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available IoT Hub REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(options);
            }
        };
    }
    listPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available IoT Hub REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Microsoft.Devices/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing IotHubResource operations. */
class IotHubResourceImpl {
    /**
     * Initialize a new instance of the class IotHubResource class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all the IoT hubs in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBySubscriptionPagingPage(options);
            }
        };
    }
    listBySubscriptionPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listBySubscription(options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get all the IoT hubs in a resource group.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByResourceGroupPagingPage(resourceGroupName, options);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get the list of valid SKUs for an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    listValidSkus(resourceGroupName, resourceName, options) {
        const iter = this.getValidSkusPagingAll(resourceGroupName, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.getValidSkusPagingPage(resourceGroupName, resourceName, options);
            }
        };
    }
    getValidSkusPagingPage(resourceGroupName, resourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* getValidSkusPagingPage_1() {
            let result = yield tslib.__await(this._getValidSkus(resourceGroupName, resourceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._getValidSkusNext(resourceGroupName, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    getValidSkusPagingAll(resourceGroupName, resourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* getValidSkusPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.getValidSkusPagingPage(resourceGroupName, resourceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT
     * hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
     * @param options The options parameters.
     */
    listEventHubConsumerGroups(resourceGroupName, resourceName, eventHubEndpointName, options) {
        const iter = this.listEventHubConsumerGroupsPagingAll(resourceGroupName, resourceName, eventHubEndpointName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listEventHubConsumerGroupsPagingPage(resourceGroupName, resourceName, eventHubEndpointName, options);
            }
        };
    }
    listEventHubConsumerGroupsPagingPage(resourceGroupName, resourceName, eventHubEndpointName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listEventHubConsumerGroupsPagingPage_1() {
            let result = yield tslib.__await(this._listEventHubConsumerGroups(resourceGroupName, resourceName, eventHubEndpointName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listEventHubConsumerGroupsNext(resourceGroupName, resourceName, eventHubEndpointName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listEventHubConsumerGroupsPagingAll(resourceGroupName, resourceName, eventHubEndpointName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listEventHubConsumerGroupsPagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listEventHubConsumerGroupsPagingPage(resourceGroupName, resourceName, eventHubEndpointName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Get a list of all the jobs in an IoT hub. For more information, see:
     * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    listJobs(resourceGroupName, resourceName, options) {
        const iter = this.listJobsPagingAll(resourceGroupName, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listJobsPagingPage(resourceGroupName, resourceName, options);
            }
        };
    }
    listJobsPagingPage(resourceGroupName, resourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listJobsPagingPage_1() {
            let result = yield tslib.__await(this._listJobs(resourceGroupName, resourceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listJobsNext(resourceGroupName, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listJobsPagingAll(resourceGroupName, resourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listJobsPagingAll_1() {
            var e_5, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listJobsPagingPage(resourceGroupName, resourceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Get the quota metrics for an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    listQuotaMetrics(resourceGroupName, resourceName, options) {
        const iter = this.getQuotaMetricsPagingAll(resourceGroupName, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.getQuotaMetricsPagingPage(resourceGroupName, resourceName, options);
            }
        };
    }
    getQuotaMetricsPagingPage(resourceGroupName, resourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* getQuotaMetricsPagingPage_1() {
            let result = yield tslib.__await(this._getQuotaMetrics(resourceGroupName, resourceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._getQuotaMetricsNext(resourceGroupName, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    getQuotaMetricsPagingAll(resourceGroupName, resourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* getQuotaMetricsPagingAll_1() {
            var e_6, _a;
            try {
                for (var _b = tslib.__asyncValues(this.getQuotaMetricsPagingPage(resourceGroupName, resourceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Get the health for routing endpoints.
     * @param resourceGroupName
     * @param iotHubName
     * @param options The options parameters.
     */
    listEndpointHealth(resourceGroupName, iotHubName, options) {
        const iter = this.getEndpointHealthPagingAll(resourceGroupName, iotHubName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.getEndpointHealthPagingPage(resourceGroupName, iotHubName, options);
            }
        };
    }
    getEndpointHealthPagingPage(resourceGroupName, iotHubName, options) {
        return tslib.__asyncGenerator(this, arguments, function* getEndpointHealthPagingPage_1() {
            let result = yield tslib.__await(this._getEndpointHealth(resourceGroupName, iotHubName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._getEndpointHealthNext(resourceGroupName, iotHubName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    getEndpointHealthPagingAll(resourceGroupName, iotHubName, options) {
        return tslib.__asyncGenerator(this, arguments, function* getEndpointHealthPagingAll_1() {
            var e_7, _a;
            try {
                for (var _b = tslib.__asyncValues(this.getEndpointHealthPagingPage(resourceGroupName, iotHubName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    }
    /**
     * Get the security metadata for an IoT hub. For more information, see:
     * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, resourceName, options) {
        const iter = this.listKeysPagingAll(resourceGroupName, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listKeysPagingPage(resourceGroupName, resourceName, options);
            }
        };
    }
    listKeysPagingPage(resourceGroupName, resourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listKeysPagingPage_1() {
            let result = yield tslib.__await(this._listKeys(resourceGroupName, resourceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listKeysNext(resourceGroupName, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listKeysPagingAll(resourceGroupName, resourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listKeysPagingAll_1() {
            var e_8, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listKeysPagingPage(resourceGroupName, resourceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    }
    /**
     * Get the non-security related metadata of an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, getOperationSpec$3);
    }
    /**
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve
     * the IoT hub metadata and security metadata, and then combine them with the modified values in a new
     * body to update the IoT hub. If certain properties are missing in the JSON, updating IoT Hub may
     * cause these values to fallback to default, which may lead to unexpected behavior.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, resourceName, iotHubDescription, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, resourceName, iotHubDescription, options }, createOrUpdateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve
     * the IoT hub metadata and security metadata, and then combine them with the modified values in a new
     * body to update the IoT hub. If certain properties are missing in the JSON, updating IoT Hub may
     * cause these values to fallback to default, which may lead to unexpected behavior.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, resourceName, iotHubDescription, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, resourceName, iotHubDescription, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
     * @param resourceGroupName Resource group identifier.
     * @param resourceName Name of iot hub to update.
     * @param iotHubTags Updated tag information to set into the iot hub instance.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, resourceName, iotHubTags, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, resourceName, iotHubTags, options }, updateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
     * @param resourceGroupName Resource group identifier.
     * @param resourceName Name of iot hub to update.
     * @param iotHubTags Updated tag information to set into the iot hub instance.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, resourceName, iotHubTags, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, resourceName, iotHubTags, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, resourceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, resourceName, options }, deleteOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, resourceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, resourceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get all the IoT hubs in a subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Get all the IoT hubs in a resource group.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Get the statistics from an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    getStats(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, getStatsOperationSpec);
    }
    /**
     * Get the list of valid SKUs for an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    _getValidSkus(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, getValidSkusOperationSpec);
    }
    /**
     * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT
     * hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
     * @param options The options parameters.
     */
    _listEventHubConsumerGroups(resourceGroupName, resourceName, eventHubEndpointName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, eventHubEndpointName, options }, listEventHubConsumerGroupsOperationSpec);
    }
    /**
     * Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to retrieve.
     * @param options The options parameters.
     */
    getEventHubConsumerGroup(resourceGroupName, resourceName, eventHubEndpointName, name, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, eventHubEndpointName, name, options }, getEventHubConsumerGroupOperationSpec);
    }
    /**
     * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to add.
     * @param consumerGroupBody The consumer group to add.
     * @param options The options parameters.
     */
    createEventHubConsumerGroup(resourceGroupName, resourceName, eventHubEndpointName, name, consumerGroupBody, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            eventHubEndpointName,
            name,
            consumerGroupBody,
            options
        }, createEventHubConsumerGroupOperationSpec);
    }
    /**
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param name The name of the consumer group to delete.
     * @param options The options parameters.
     */
    deleteEventHubConsumerGroup(resourceGroupName, resourceName, eventHubEndpointName, name, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, eventHubEndpointName, name, options }, deleteEventHubConsumerGroupOperationSpec);
    }
    /**
     * Get a list of all the jobs in an IoT hub. For more information, see:
     * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    _listJobs(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listJobsOperationSpec);
    }
    /**
     * Get the details of a job from an IoT hub. For more information, see:
     * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param jobId The job identifier.
     * @param options The options parameters.
     */
    getJob(resourceGroupName, resourceName, jobId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, jobId, options }, getJobOperationSpec);
    }
    /**
     * Get the quota metrics for an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    _getQuotaMetrics(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, getQuotaMetricsOperationSpec);
    }
    /**
     * Get the health for routing endpoints.
     * @param resourceGroupName
     * @param iotHubName
     * @param options The options parameters.
     */
    _getEndpointHealth(resourceGroupName, iotHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, iotHubName, options }, getEndpointHealthOperationSpec);
    }
    /**
     * Check if an IoT hub name is available.
     * @param operationInputs Set the name parameter in the OperationInputs structure to the name of the
     *                        IoT hub to check.
     * @param options The options parameters.
     */
    checkNameAvailability(operationInputs, options) {
        return this.client.sendOperationRequest({ operationInputs, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Test all routes configured in this Iot Hub
     * @param iotHubName IotHub to be tested
     * @param resourceGroupName resource group which Iot Hub belongs to
     * @param input Input for testing all routes
     * @param options The options parameters.
     */
    testAllRoutes(iotHubName, resourceGroupName, input, options) {
        return this.client.sendOperationRequest({ iotHubName, resourceGroupName, input, options }, testAllRoutesOperationSpec);
    }
    /**
     * Test the new route for this Iot Hub
     * @param iotHubName IotHub to be tested
     * @param resourceGroupName resource group which Iot Hub belongs to
     * @param input Route that needs to be tested
     * @param options The options parameters.
     */
    testRoute(iotHubName, resourceGroupName, input, options) {
        return this.client.sendOperationRequest({ iotHubName, resourceGroupName, input, options }, testRouteOperationSpec);
    }
    /**
     * Get the security metadata for an IoT hub. For more information, see:
     * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    _listKeys(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listKeysOperationSpec);
    }
    /**
     * Get a shared access policy by name from an IoT hub. For more information, see:
     * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param keyName The name of the shared access policy.
     * @param options The options parameters.
     */
    getKeysForKeyName(resourceGroupName, resourceName, keyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, keyName, options }, getKeysForKeyNameOperationSpec);
    }
    /**
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob
     * container. For more information, see:
     * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param exportDevicesParameters The parameters that specify the export devices operation.
     * @param options The options parameters.
     */
    exportDevices(resourceGroupName, resourceName, exportDevicesParameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, exportDevicesParameters, options }, exportDevicesOperationSpec);
    }
    /**
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more
     * information, see:
     * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param importDevicesParameters The parameters that specify the import devices operation.
     * @param options The options parameters.
     */
    importDevices(resourceGroupName, resourceName, importDevicesParameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, importDevicesParameters, options }, importDevicesOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * GetValidSkusNext
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param nextLink The nextLink from the previous successful call to the GetValidSkus method.
     * @param options The options parameters.
     */
    _getValidSkusNext(resourceGroupName, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, nextLink, options }, getValidSkusNextOperationSpec);
    }
    /**
     * ListEventHubConsumerGroupsNext
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
     * @param nextLink The nextLink from the previous successful call to the ListEventHubConsumerGroups
     *                 method.
     * @param options The options parameters.
     */
    _listEventHubConsumerGroupsNext(resourceGroupName, resourceName, eventHubEndpointName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            eventHubEndpointName,
            nextLink,
            options
        }, listEventHubConsumerGroupsNextOperationSpec);
    }
    /**
     * ListJobsNext
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param nextLink The nextLink from the previous successful call to the ListJobs method.
     * @param options The options parameters.
     */
    _listJobsNext(resourceGroupName, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, nextLink, options }, listJobsNextOperationSpec);
    }
    /**
     * GetQuotaMetricsNext
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param nextLink The nextLink from the previous successful call to the GetQuotaMetrics method.
     * @param options The options parameters.
     */
    _getQuotaMetricsNext(resourceGroupName, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, nextLink, options }, getQuotaMetricsNextOperationSpec);
    }
    /**
     * GetEndpointHealthNext
     * @param resourceGroupName
     * @param iotHubName
     * @param nextLink The nextLink from the previous successful call to the GetEndpointHealth method.
     * @param options The options parameters.
     */
    _getEndpointHealthNext(resourceGroupName, iotHubName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, iotHubName, nextLink, options }, getEndpointHealthNextOperationSpec);
    }
    /**
     * ListKeysNext
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param nextLink The nextLink from the previous successful call to the ListKeys method.
     * @param options The options parameters.
     */
    _listKeysNext(resourceGroupName, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, nextLink, options }, listKeysNextOperationSpec);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IotHubDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: IotHubDescription
        },
        201: {
            bodyMapper: IotHubDescription
        },
        202: {
            bodyMapper: IotHubDescription
        },
        204: {
            bodyMapper: IotHubDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: iotHubDescription,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$5
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: IotHubDescription
        },
        201: {
            bodyMapper: IotHubDescription
        },
        202: {
            bodyMapper: IotHubDescription
        },
        204: {
            bodyMapper: IotHubDescription
        }
    },
    requestBody: iotHubTags,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: IotHubDescription
        },
        201: {
            bodyMapper: IotHubDescription
        },
        202: {
            bodyMapper: IotHubDescription
        },
        204: {
            bodyMapper: IotHubDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IotHubDescriptionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IotHubDescriptionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getStatsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubStats",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RegistryStatistics
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getValidSkusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IotHubSkuDescriptionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listEventHubConsumerGroupsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventHubConsumerGroupsListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        eventHubEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getEventHubConsumerGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventHubConsumerGroupInfo
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        eventHubEndpointName,
        name
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const createEventHubConsumerGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: EventHubConsumerGroupInfo
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: consumerGroupBody,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        eventHubEndpointName,
        name
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const deleteEventHubConsumerGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        eventHubEndpointName,
        name
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listJobsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResponseListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getJobOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs/{jobId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResponse
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        jobId
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getQuotaMetricsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/quotaMetrics",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IotHubQuotaMetricInfoListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getEndpointHealthOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routingEndpointsHealth",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EndpointHealthDataListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        iotHubName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: IotHubNameAvailabilityInfo
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: operationInputs,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const testAllRoutesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testall",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TestAllRoutesResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: input,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        iotHubName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const testRouteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testnew",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TestRouteResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: input1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        iotHubName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SharedAccessSignatureAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getKeysForKeyNameOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SharedAccessSignatureAuthorizationRule
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        keyName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const exportDevicesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: JobResponse
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: exportDevicesParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const importDevicesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: JobResponse
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: importDevicesParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IotHubDescriptionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IotHubDescriptionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getValidSkusNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IotHubSkuDescriptionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listEventHubConsumerGroupsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventHubConsumerGroupsListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        resourceName,
        eventHubEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listJobsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResponseListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getQuotaMetricsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IotHubQuotaMetricInfoListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getEndpointHealthNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EndpointHealthDataListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        iotHubName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listKeysNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SharedAccessSignatureAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ResourceProviderCommon operations. */
class ResourceProviderCommonImpl {
    /**
     * Initialize a new instance of the class ResourceProviderCommon class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the number of free and paid iot hubs in the subscription
     * @param options The options parameters.
     */
    getSubscriptionQuota(options) {
        return this.client.sendOperationRequest({ options }, getSubscriptionQuotaOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getSubscriptionQuotaOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/usages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserSubscriptionQuotaListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Certificates operations. */
class CertificatesImpl {
    /**
     * Initialize a new instance of the class Certificates class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of certificates.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    listByIotHub(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listByIotHubOperationSpec);
    }
    /**
     * Returns the certificate.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, certificateName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, certificateName, options }, getOperationSpec$2);
    }
    /**
     * Adds new or replaces existing certificate.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param certificateDescription The certificate body.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, resourceName, certificateName, certificateDescription, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            certificateName,
            certificateDescription,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes an existing X509 certificate or does nothing if it does not exist.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, certificateName, ifMatch, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, certificateName, ifMatch, options }, deleteOperationSpec$1);
    }
    /**
     * Generates verification code for proof of possession flow. The verification code will be used to
     * generate a leaf certificate.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param options The options parameters.
     */
    generateVerificationCode(resourceGroupName, resourceName, certificateName, ifMatch, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, certificateName, ifMatch, options }, generateVerificationCodeOperationSpec);
    }
    /**
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying
     * pre uploaded certificate.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param certificateVerificationBody The name of the certificate
     * @param options The options parameters.
     */
    verify(resourceGroupName, resourceName, certificateName, ifMatch, certificateVerificationBody, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            certificateName,
            ifMatch,
            certificateVerificationBody,
            options
        }, verifyOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByIotHubOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CertificateListDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CertificateDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        certificateName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CertificateDescription
        },
        201: {
            bodyMapper: CertificateDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: certificateDescription,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        certificateName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        certificateName
    ],
    headerParameters: [accept, ifMatch1],
    serializer: serializer$3
};
const generateVerificationCodeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/generateVerificationCode",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CertificateWithNonceDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        certificateName
    ],
    headerParameters: [accept, ifMatch1],
    serializer: serializer$3
};
const verifyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/verify",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CertificateDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: certificateVerificationBody,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        certificateName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch1
    ],
    mediaType: "json",
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing IotHub operations. */
class IotHubImpl {
    /**
     * Initialize a new instance of the class IotHub class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Manually initiate a failover for the IoT Hub to its secondary region. To learn more, see
     * https://aka.ms/manualfailover
     * @param iotHubName Name of the IoT hub to failover
     * @param resourceGroupName Name of the resource group containing the IoT hub resource
     * @param failoverInput Region to failover to. Must be the Azure paired region. Get the value from the
     *                      secondary location in the locations property. To learn more, see
     *                      https://aka.ms/manualfailover/region
     * @param options The options parameters.
     */
    beginManualFailover(iotHubName, resourceGroupName, failoverInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { iotHubName, resourceGroupName, failoverInput, options }, manualFailoverOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Manually initiate a failover for the IoT Hub to its secondary region. To learn more, see
     * https://aka.ms/manualfailover
     * @param iotHubName Name of the IoT hub to failover
     * @param resourceGroupName Name of the resource group containing the IoT hub resource
     * @param failoverInput Region to failover to. Must be the Azure paired region. Get the value from the
     *                      secondary location in the locations property. To learn more, see
     *                      https://aka.ms/manualfailover/region
     * @param options The options parameters.
     */
    beginManualFailoverAndWait(iotHubName, resourceGroupName, failoverInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginManualFailover(iotHubName, resourceGroupName, failoverInput, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const manualFailoverOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/failover",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: failoverInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        iotHubName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateLinkResourcesOperations operations. */
class PrivateLinkResourcesOperationsImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResourcesOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List private link resources for the given IotHub
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    list(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listOperationSpec$1);
    }
    /**
     * Get the specified private link resource for the given IotHub
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param groupId The name of the private link resource
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, groupId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, groupId, options }, getOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResources
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateLinkResources/{groupId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GroupIdInformation
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        groupId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateEndpointConnections operations. */
class PrivateEndpointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List private endpoint connection properties
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The options parameters.
     */
    list(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listOperationSpec);
    }
    /**
     * Get private endpoint connection properties
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            privateEndpointConnectionName,
            options
        }, getOperationSpec);
    }
    /**
     * Update the status of a private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection The private endpoint connection with updated properties
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                resourceName,
                privateEndpointConnectionName,
                privateEndpointConnection,
                options
            }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the status of a private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection The private endpoint connection with updated properties
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                resourceName,
                privateEndpointConnectionName,
                options
            }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, resourceName, privateEndpointConnectionName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "PrivateEndpointConnection" }
                    }
                }
            }
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        201: {
            bodyMapper: PrivateEndpointConnection
        },
        202: {
            bodyMapper: PrivateEndpointConnection
        },
        204: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: privateEndpointConnection,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        201: {
            bodyMapper: PrivateEndpointConnection
        },
        202: {
            bodyMapper: PrivateEndpointConnection
        },
        204: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class IotHubClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the IotHubClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription identifier.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-iothub/6.2.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: `${optionsWithDefaults.credentialScopes}`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-07-02";
        this.operations = new OperationsImpl(this);
        this.iotHubResource = new IotHubResourceImpl(this);
        this.resourceProviderCommon = new ResourceProviderCommonImpl(this);
        this.certificates = new CertificatesImpl(this);
        this.iotHub = new IotHubImpl(this);
        this.privateLinkResourcesOperations = new PrivateLinkResourcesOperationsImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.IotHubClient = IotHubClient;
//# sourceMappingURL=index.js.map
